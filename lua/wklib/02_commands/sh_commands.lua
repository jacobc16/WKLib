-- wkcustom.command = {}
-- wkcustom.command.cmds = {}
-- -- Create a new command
-- wkcustom.command.new = function(cmd, callback, canUse, useSlash)
-- 	canUse = canUse or {}
-- 	useSlash = useSlash or false
-- 	-- Check to make sure canUse is a table
-- 	if not istable(canUse) then
-- 		local copy = canUse
-- 		canUse = {}
-- 		canUse[0] = copy
-- 	end

-- 	-- Add command to the list of commands
-- 	wkcustom.command.cmds[cmd] = {
-- 		cmd = cmd,
-- 		callback = callback,
-- 		canUse = canUse,
-- 		useSlash = useSlash
-- 	}
-- end

-- -- Check to see if the player can use the command specified
-- wkcustom.command.canUseCmd = function(cmd, ply)
-- 	local bool = false
-- 	local data = wkcustom.command.cmds[cmd].canUse
-- 	-- If the table is empty then everyone can use the command
-- 	bool = table.IsEmpty(data)
-- 	if not bool then
-- 		for _index, key in pairs(table.GetKeys(data)) do
-- 			if bool then break end
-- 			-- Check the players rank and see if it matches
-- 			if key == "rank" then
-- 				if istable(data[key]) then
-- 					for k, rank in pairs(data[key]) do
-- 						bool = ply:IsUserGroup(rank)
-- 						if bool then break end
-- 					end
-- 				else
-- 					bool = ply:IsUserGroup(data[key])
-- 				end
-- 				-- Check the players job name and see if it matches
-- 			elseif key == "job" then
-- 				bool = wkcustom.get.isjob(ply, data[key])
-- 				-- Check the permission and see if the player can use the command
-- 			elseif key == "perm" then
-- 				bool = wkcustom.perm.has(ply, data[key])
-- 				-- If the key is steamid then compare steamid
-- 			elseif key == "steamid" then
-- 				if istable(data[key]) then
-- 					for k, steamid in pairs(data[key]) do
-- 						bool = ply:SteamID() == steamid
-- 						if bool then break end
-- 					end
-- 				else
-- 					bool = ply:SteamID() == data[key]
-- 				end
-- 			end
-- 		end
-- 	end
-- 	return bool
-- end

-- wkcustom.command.get = function(cmd) return wkcustom.command.cmds[cmd] end
-- hook.Add("PlayerSay", "wkcustom-commands-playersay", function(ply, text)
-- 	-- Check to make sure the message sent is going to be a command
-- 	if string.sub(text, 1, 1) == "!" or string.sub(text, 1, 1) == "/" then
-- 		local args = string.Split(text, " ")
-- 		for k, v in pairs(wkcustom.command.cmds) do
-- 			local selector = "!"
-- 			if v.useSlash then selector = "/" end
-- 			if selector .. v.cmd == string.lower(args[1]) then
-- 				if wkcustom.command.canUseCmd(v.cmd, ply) then
-- 					-- Remove the command typed from the arguments sent
-- 					local nargs = {}
-- 					table.remove(args, 1)
-- 					table.Add(nargs, args)
-- 					-- Send the play and args to the callback function
-- 					v.callback(ply, nargs)
-- 				else
-- 					-- Print the error message if they can not use the command
-- 					ply:ColorChat(Color(231, 76, 60), "Error: ", Color(255, 255, 255), "You do can not use this command.")
-- 				end
-- 				return ""
-- 			end
-- 		end
-- 	end
-- end)
-- --[[ Example function
-- wkcustom.command.new("test", function(ply, args)
-- 	print("Test called by: "..ply:Nick())
-- 	PrintTable(args)
-- end, {
-- 	rank = "superadmin", -- User is superadmin
-- 	job = {"Hobo"} -- User is on job named hobo
-- })
-- ]]
-- --